# Defense Lab Write-up (Recon: Part 1)

## Introduction
For the CS 596 Defense Lab, I was tasked with hardening a Linux system that has been backdoored. I also need to patch services to ensure the services uptime by eliminating bug and exploit.

## Initial Backdoor Recon

There are two initial logins that was given to us in the lab instruction. That is mrrobot/mrrobot and elliot/fsociety. I started login the elliot account and try to see whats up in there. I first try to search if there is any suspicious hidden file in the home directory of elliot by running this command: <br>
`find . -iname ".*" 2>/dev/null <br>
I found something interesting: <br>
![Terminal Screenshot](assets/images/blog_images/blog1/1.png)
<br>✅ Found the backdoor directory!
<br>Now, the next step would be analyze the file. Further reading show:
![Terminal Screenshot](assets/images/blog_images/blog1/2.png)
<br>Nice so we confirm that the backdoor is using port 33123. Knowing this file exist, now let see how they would use this. Sometimes it would be in a service config or some file that run after we login. To broaden the search I used the below command:
<br>`grep -lir "backdoor"
<br> this will search everything in the home directory that contain backdoor word inside the file
![Terminal Screenshot](assets/images/blog_images/blog1/3.png)
<br> Found it, we can disregard .bash_history because this is just a history file but .bashrc would be suspicious because it run when we first open a terminal. Lets take a look inside
![Terminal Screenshot](assets/images/blog_images/blog1/4.png)
<br>At the very end of the file, we found this interesting piece of code that is obviously was add to the default .bashrc because if we run diff command between the default .bashrc and ours, this is what we have
![Terminal Screenshot](assets/images/blog_images/blog1/5.png)
<br> After that, I just ran a vm-wide check command to check the root directory if we have any backdoor file using the above commands with sudo privileges. I found some interesting command was used in the root .bash_history that guide me to couple places that is vulnerable but I guessed this was done to setup the lab so no harm was done here.

## Interesting Find in .ssh

After confirming no other backdoor file was found in the vm, I move on to the ssh services. I checked if there is any authorized_keys file on the server using this command:
<br>`sudo find / -iname "authorized_keys" 2>/dev/null
![Terminal Screenshot](assets/images/blog_images/blog1/6.png)
<br> Interestingly, I found 2 files. One can be ignore because it is inside the directory where they setup our services. I then go .ssh directory in mrrobot to find out if there is any key inside here and interestingly enough I found a pair of keys (which they should have been on the attacker machine instead.) I guess this was left unintentionally but harm could be done to me if I leave this key on here. Because I tested connecting to mrrobot using the id_rsa key here and I was able to login through ssh and perform privilege escalation due to the vunerable sudo version. This was what I used and the result:
![Terminal Screenshot](assets/images/blog_images/blog1/7.png)
![Terminal Screenshot](assets/images/blog_images/blog1/8.png)
![Terminal Screenshot](assets/images/blog_images/blog1/9.png)
<br>✅ We have found another backdoor (Though it was confirm at the lab day that this was unintended but I thought it was cool to know)
<br> **Vulnerability**: Found the sudo version in this machine is vulnerable to CVE-2021-3156.

## Vulnerables Services

Now time to investigate our service. I used this command to see what service this machine host:
<br> `sudo ss -lntup 
![Terminal Screenshot](assets/images/blog_images/blog1/10.png)
<br>We can confirm that our backdoor is open in port 33123 and beside ssh service on 22 we have a few services running such as: apache2, mysqld and cups. Since we have apache2 service is on its time to check the root directory which usually reside in /var/www/html by most default config. However, since there is a service directory in elliot account and we were told to read README file to patch the services, lets take a look at what kind of services we suppose to fix.
![Terminal Screenshot](assets/images/blog_images/blog1/11.png)
<br>Here we can see a few vulnerable services directory. Lets take a look at each one!

## Services Directory

### Arbitrary_file_upload

Inside the directory we found the vulnerable file `upload.php and the README show us what the file was doing and what would be the fix. However, lets go to the red team perspective and see what can we do with this vulnerability. I then check the root directory of our website /var/www/html/arbitrary_file_upload/ and I found there is a shell.php in the images directory that was what could have been a backdoor as well because if I run the below code:
![Terminal Screenshot](assets/images/blog_images/blog1/12.png)
<br> This essentially was running this command
<br> The encoded part was this
![Terminal Screenshot](assets/images/blog_images/blog1/encoded.png)
<br>This will trick the server to return me the reverse shell on port 4444. As the result, I gain reverse shell on there
![Terminal Screenshot](assets/images/blog_images/blog1/13.png)
<br>✅ Nice so we found another backdoor, though the id here is www-data which essentially restricted access on the server but we could do some enumeration while on the reverse shell.

### Python Command Injection

Let's look at the python command injection code.
![Terminal Screenshot](assets/images/blog_images/blog1/14.png)
<br> From  the name implies, we know that this code is vulnerable to code injection and how would it be dangerous in this situation. let see how it run. We first start the service using the script inside the services directory. Then run nc command to talk to our service and this is what we get if we add 1 more command to it
<br>![Terminal Screenshot](assets/images/blog_images/blog1/15.png)
<br>✅ Cool! Now lets do some mallicious activity to understand how our red team would get us if we do not patch it. I create a script on my attack machine like below and the result.
![Terminal Screenshot](assets/images/blog_images/blog1/16.png)
![Terminal Screenshot](assets/images/blog_images/blog1/17.png)

(Continue)
